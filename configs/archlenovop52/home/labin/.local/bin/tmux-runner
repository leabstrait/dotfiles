#!/usr/bin/env bash

# Function to handle Ctrl+C
handle_ctrl_c() {
    echo -e "\nSession creation interrupted. Exiting."
    exit 1
}

# Function to create a new session
create_new_session() {
    local new_session_name=$1
    if [ -z "$new_session_name" ]; then
        read -p "Enter new session name (leave empty for an indexed name): " new_session_name
    fi

    if [ -n "$TMUX" ]; then
        # If inside a tmux session, create a new session and switch to it
        if [ -n "$new_session_name" ]; then
            tmux new-session -ds "$new_session_name" && tmux switch-client -t "$new_session_name"
        else
            tmux new-session -d && tmux switch-client -n
        fi
    else
        # If not inside a tmux session, create a new session normally
        if [ -n "$new_session_name" ]; then
            tmux new-session -s "$new_session_name"
        else
            tmux new-session
        fi
    fi
}

# Function to retrieve and optionally filter sessions
filter_sessions() {
    local sessions=()
    local current_session

    # Get the list of sessions
    local tmux_sessions
    tmux_sessions=$(tmux list-sessions 2>/dev/null || true)

    # Read session names into an array, filtering out empty lines
    while IFS= read -r line; do
        # Ensure line is not empty and trim whitespace
        trimmed_line=$(echo "$line" | xargs)
        [ -n "$trimmed_line" ] && sessions+=("$trimmed_line")
    done <<<"$tmux_sessions"

    if [ -n "$TMUX" ]; then
        current_session=$(tmux display-message -p '#{session_name}')
        local filtered_sessions=()
        for session in "${sessions[@]}"; do
            local session_name=$(echo "$session" | cut -d: -f1)
            if [ "$session_name" != "$current_session" ]; then
                filtered_sessions+=("$session")
            fi
        done
        sessions=("${filtered_sessions[@]}")
    fi

    printf "%s\n" "${sessions[@]}"
}

# Function to select or specify a new session
select_session() {
    local sessions_str="$1"
    IFS=$'\n' read -r -d '' -a sessions <<< "$sessions_str"
    local session_count=${#sessions[@]}

    if [ "$session_count" -eq 1 ]; then
        # A single session exists
        SESSION=${sessions[0]}
        echo "A single session exists: $SESSION"
        read -p "Press Enter to attach to the existing session or enter a new session name to create: " NEW_SESSION
        if [ -n "$NEW_SESSION" ]; then
            create_new_session "$NEW_SESSION"
        else
            SESSION_NAME=$(echo "$SESSION" | cut -d: -f1)
            if [ -n "$TMUX" ]; then
                tmux switch-client -t "$SESSION_NAME" &&
                    tmux list-clients -F '#{client_name}' |
                    grep -v "$(tmux display-message -p '#{client_name}')" |
                        xargs -I {} tmux detach-client -t {}
            else
                tmux attach-session -d -t "$SESSION_NAME"
            fi
        fi
    else
        # More than one session exists
        SESSION=$(printf "%s\n" "${sessions[@]}" | fzf --no-multi --height 100% --header 'Jump to Session' --nth 1 --preview 'tmux capture-pane -pt {1}' --bind "del:execute-silent(tmux kill-session -t {1})+reload((tmux list-sessions | grep -v ^"$(tmux display-message -p '#{session_name}')") || exit 0 )+refresh-preview")
        if [ -n "$SESSION" ]; then
            SESSION_NAME=$(echo "$SESSION" | cut -d: -f1)
            if [ -n "$TMUX" ]; then
                tmux switch-client -t "$SESSION_NAME" &&
                    tmux list-clients -F '#{client_name}' |
                    grep -v "$(tmux display-message -p '#{client_name}')" |
                        xargs -I {} tmux detach-client -t {}
            else
                tmux attach-session -d -t "$SESSION_NAME"
            fi
        else
            create_new_session
        fi
    fi
}

# Main script execution
main() {
    # Set up trap for Ctrl+C
    trap handle_ctrl_c SIGINT

    # Get the filtered sessions list and determine if attaching to an existing session or creating a new one
    local sessions
    sessions=$(filter_sessions)
    if [ -n "$sessions" ]; then
        select_session "$sessions"
    else
        echo "No sessions exist. Creating a new session."
        create_new_session
    fi
}

# Run the main function
main
