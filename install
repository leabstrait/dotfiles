#!/usr/bin/env bash

# set -euo pipefail

DOTFILES_INSTALL_LOG="${HOME}/dotfiles-install.log"
GITHUB_USER="leabstrait"
GITHUB_REPO="dotfiles"
DOTFILES_DIR="${HOME}/${GITHUB_REPO}"
CONFIG_ROOT="$DOTFILES_DIR/configs/$(hostnamectl hostname)"
echo $CONFIG_ROOT

# Status functions
_process() {
  echo "$(date) PROCESSING:  $@" >>$DOTFILES_INSTALL_LOG
  printf "%s● Process:%s\n" "$(tput setaf 4)" "$(tput sgr0) $@"
}

_success() {
  echo "$(date) SUCCESS:  $@" >>$DOTFILES_INSTALL_LOG
  local message=$1
  printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"$'\n'
}

_warning() {
  echo "$(date) WARNING:  $@" >>$DOTFILES_INSTALL_LOG
  local message=$1
  printf "%s! Warning:%s\n" "$(tput setaf 3)" "$(tput sgr0) $message"
}

_failure() {
  echo "$(date) FAILURE:  $@" >>$DOTFILES_INSTALL_LOG
  local message=$1
  printf "%s✗ Failure:%s\n" "$(tput setaf 1)" "$(tput sgr0) $message"$'\n'
}

# Config functions
clone_dotfiles() {
  if [ ! -d "${DOTFILES_DIR}" ]; then
    _process "→ Creating directory at ${DOTFILES_DIR} and setting permissions"
    mkdir -p "${DOTFILES_DIR}"

    _process "→ Cloning repository to ${DOTFILES_DIR}"
    git clone "git@github.com:${GITHUB_USER}/${GITHUB_REPO}.git" "${DOTFILES_DIR}"

    [[ $? ]] && _success "${DOTFILES_DIR} created, repository cloned"

    # Change to the dotfiles directory
    cd "${DOTFILES_DIR}"
  fi
}

link_dotfiles() {
  # symlink files to the ROOT(/) directory.
  if [[ -d $CONFIG_ROOT ]]; then
    _process "→ Symlinking dotfiles in $CONFIG_ROOT\n"

    find $CONFIG_ROOT -type f -not -name "*.bak" | while read config_file; do
      _process "→ Linking ${config_file}"
      filename=${config_file#"$CONFIG_ROOT"}
      if [[ -f $filename ]]; then
        echo "File $filename already exixts!"
        echo "Do you want to show the diff between the dotfile and the original file? (y/n)"
        read REPLY </dev/tty
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          echo "diff:"
          if [ $filename = ${filename#"$HOME"} ]; then
            # echo  $filename $config_file | xargs code -dw -
            echo $filename $config_file | xargs sudo meld
            echo "Do you want to overwrite the original file with the tracked file? (y/n)"
            read REPLY </dev/tty
            if [[ $REPLY =~ ^[Yy]$ ]]; then
              sudo ln -sfv $config_file $filename
            fi
            echo
          else
            # echo $filename $config_file |xargs  code -dw -
            echo $filename $config_file | xargs meld
            echo "Do you want to overwrite the original file with the tracked file? (y/n)"
            read REPLY </dev/tty
            if [[ $REPLY =~ ^[Yy]$ ]]; then
              ln -sfv $config_file $filename
            fi
            echo
          fi
        else
          continue
        fi
      fi
      if [[ ! -L "$filename" ]]; then
        if [ $filename = ${filename#"$HOME"} ]; then
          sudo mkdir -p "$(dirname "$filename")"
          sudo ln -sv "$config_file" "$filename"
        else
          mkdir -p "$(dirname "$filename")"
          ln -sv "$config_file" "$filename"
        fi
        _success "→ Linked $config_file to $filename"
      else
        _warning "→ $filename already exists as a symlink"
        # echo $(diff "$config_file" "$filename")
        _failure "→ Not linked $config_file; link exists"
      fi
    done
  fi
}

# Install paru AUR helper
install_paru() {
  if [[ -z $(command -v paru) ]]; then
    _process "→ Installing paru"
    git clone https://aur.archlinux.org/paru-bin.git ~/paru
    cd ~/paru
    makepkg -si
    cd -
    _success "→ paru installed"
    _process "→ Updating paru"
    paru -Syu
    _success "→ paru updated"
    _process "→ Cleaning up paru"
    rm -rf ~/paru
    _success "→ paru cleaned up"
  fi

}

# Install meld diff tool
install_meld() {
  if [[ -z $(command -v meld)]]; then
    _process "→ Installing meld"
    paru -S meld
    _success "→ meld installed"
  fi
}

# Install packages from ~/.explicitly-installed-packages
install_packages() {
  _process "→ Installing packages with paru"
  if [ -f ~/.explicitly-installed-packages ]; then
    paru -S --needed - <~/.explicitly-installed-packages
    _success "→ Packages installed"
  fi
}

# Enable services from ~/.enabled-services-system and ~/.enabled-services-user
enable_services() {
  _process "→ Enabling services"
  if [ -f ~/.enabled-services-system ]; then
    sudo systemctl enable $(< ~/.enabled-services-system)
    _success "→ System services enabled"
    sleep 1
    sudo systemctl status --no-pager $(< ~/.enabled-services-system)
    _success "→ System services status"
    sleep 1
  fi
  if [ -f ~/.enabled-services-user ]; then
    systemctl --user enable $(< ~/.enabled-services-user)
    _success "→ User services enabled"
    sleep 1
    systemctl --user status --no-pager $(< ~/.enabled-services-user)
    _success "→ User services status"
    sleep 1
  fi
}

# Install runner
install() {
  # start with a clean logfile
  echo >"${DOTFILES_INSTALL_LOG}"

  install_paru
  install_meld

  clone_dotfiles
  link_dotfiles

  install_packages
  enable_services
}

install
